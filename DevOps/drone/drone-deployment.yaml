apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: drone-server
  name: drone-server
  namespace: devops
spec:
  replicas: 1
  selector:
    matchLabels:
      app: drone-server
  template:
    metadata:
      labels:
        app: drone-server
    spec:
      containers:
      - env:
        - name: DRONE_SERVER_HOST
          value: drone.example.io
        - name: DRONE_SERVER_PORT
          value: ":80"
        - name: DRONE_SERVER_PROTO
          value: http
        - name: DRONE_GITEA_SERVER
          value: https://gitea.example.io
        - name: DRONE_GITEA_CLIENT_ID
          value: ""
        - name: DRONE_GITEA_CLIENT_SECRET
          value: ""
        - name: DRONE_RPC_SECRET
          value: ""
        image: drone/drone:latest
        imagePullPolicy: IfNotPresent
        name: drone-server
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        #volumeMounts:
        #- name: drone-persistent-storage
        #  mountPath: /data
        #envFrom:
        #- configMapRef:
        #    name: drone-server-config
#      volumes:
#      - name: drone-persistent-storage
#        persistentVolumeClaim:
#          claimName: drone-server-pvc
      dnsPolicy: ClusterFirst
      restartPolicy: Always

#---
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: drone-runner
#  namespace: drone
#  labels:
#    app: drone-runner
#spec:
#  selector:
#    matchLabels:
#      app: drone-runner
#  replicas: 1
#  template:
#    metadata:
#      labels:
#        app: drone-runner
#    spec:
#      containers:
#      - name: drone-runner
#        image: docker.io/drone/drone-runner-kube:latest
#        imagePullPolicy: IfNotPresent
#        envFrom:
#        - configMapRef:
#            name: drone-runner-config
